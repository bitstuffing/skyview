import React, { useRef, useEffect, useState } from "react";
import * as THREE from "three";
import * as satellite from "satellite.js";

export function App() {
  const mountRef = useRef<HTMLDivElement>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!mountRef.current) return;

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(
      75,
      mountRef.current.clientWidth / mountRef.current.clientHeight,
      0.1,
      1000
    );
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(
      mountRef.current.clientWidth,
      mountRef.current.clientHeight
    );
    // Only append if not already present
    if (!mountRef.current.contains(renderer.domElement)) {
      mountRef.current.appendChild(renderer.domElement);
    }

    const textureLoader = new THREE.TextureLoader();
    const earthTexture = textureLoader.load(
      "https://unpkg.com/worldwindjs@1.7.0/build/dist/images/BMNG_world.topo.bathy.200405.3.2048x1024.jpg",
      () => setLoading(false),
      undefined,
      (error) => {
        console.error("Error cargando la textura", error);
        setLoading(false);
      }
    );

    const earthMat = new THREE.MeshBasicMaterial({
      map: earthTexture,
      transparent: true,
      opacity: 0.6,
    });

    const earth = new THREE.Mesh(
      new THREE.SphereGeometry(5, 64, 64),
      earthMat
    );

    // SOLUCIÓN DEFINITIVA CON ROTACIÓN
    earth.rotation.y = THREE.MathUtils.degToRad(180);
    earth.rotation.x = THREE.MathUtils.degToRad(180);
    
    // Centrar en España (41.38°N, 3.72°W)
    const coordinateSystem = {
      rotateTo(lat: number, lon: number) {
        const latRad = THREE.MathUtils.degToRad(lat);
        const lonRad = THREE.MathUtils.degToRad(lon);
        earth.rotation.x = latRad;
        earth.rotation.y = THREE.MathUtils.degToRad(-90) - lonRad;
      }
    };
    coordinateSystem.rotateTo(41.38, -3.72);

    scene.add(earth);

    const issMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });
    const iss = new THREE.Mesh(
      new THREE.SphereGeometry(0.2, 16, 16),
      issMaterial
    );
    //scene.add(iss);

    camera.position.z = 10;
    var tle1 = "";
    var tle2 = "";

    // fetch('https://celestrak.org/NORAD/elements/gp.php?CATNR=25544&FORMAT=TLE')
    //   .then(response => response.text())
    //   .then(data => {
    //     const lines = data.trim().split('\n');
    //     tle1 = lines[1].trim();
    //     tle2 = lines[2].trim();
    //   })
    //   .catch(error => console.error('Error fetching TLE data:', error));

    fetch('https://cors-anywhere.herokuapp.com/https://isstracker.pl/en/satellites/25544')
      .then(response => response.text())
      .then(html => {
        console.info("received!");
        // 1) localizamos el textarea por su id
        const idTag = 'id="tle-details"';
        const idxId = html.indexOf(idTag);
        if (idxId < 0) {
          console.error('No existe #tle-details en el HTML');
          return;
        }

        // 2) buscamos el '>' que abre el contenido
        const idxOpen = html.indexOf('>', idxId) + 1;
        // 3) buscamos el '</textarea>' que cierra
        const idxClose = html.indexOf('</textarea>', idxOpen);
        if (idxClose < 0) {
          console.error('No encontré cierre </textarea>');
          return;
        }

        // 4) extraemos el contenido y lo limpiamos
        const contenido = html
          .substring(idxOpen, idxClose)
          .trim();        

        // 5) separamos líneas y asignamos
        const lines = contenido.split('\n').map(l => l.trim());
        // lines[0] = "ISS (ZARYA)"
        tle1 = (lines[1] || '');
        tle2 = (lines[2] || '');
      })
      .catch(error => console.error('Error fetching TLE data:', error));

    // Crear un grupo para la órbita
    const orbitGroup = new THREE.Group();
    scene.add(orbitGroup);
    orbitGroup.add(iss);

    function updateISS() {
      const now = new Date();
      const satrec = satellite.twoline2satrec(tle1, tle2);
      const pv = satellite.propagate(satrec, now);
      if (!pv.position) return;

      const gmst = satellite.gstime(now);
      const geo = satellite.eciToGeodetic(pv.position, gmst);

      const R = 5 + (geo.height / 6371);
      const lat = geo.latitude;
      const lon = geo.longitude;

      // Posición relativa al grupo de órbita
      iss.position.set(
        R * Math.cos(lat) * Math.sin(lon),
        R * Math.sin(lat),
        R * Math.cos(lat) * Math.cos(lon)
      );
    }

    let frameId: number;
    function animate() {
      updateISS();
      
      // ROTACIÓN DE LA TIERRA
      earth.rotation.y += 0.01; // Velocidad de rotación
      
      // Mantener la ISS en su posición orbital relativa
      orbitGroup.rotation.copy(earth.rotation);
      
      renderer.render(scene, camera);
      frameId = requestAnimationFrame(animate);
    }
    animate();

    const onResize = () => {
      if (!mountRef.current) return;
      camera.aspect = mountRef.current.clientWidth / mountRef.current.clientHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);
    };
    window.addEventListener("resize", onResize);

    return () => {
      cancelAnimationFrame(frameId);
      window.removeEventListener("resize", onResize);
      renderer.dispose();
      scene.clear();
      if (mountRef.current) {
        mountRef.current.removeChild(renderer.domElement);
      }
    };
  }, []);

  return (
    <div
      ref={mountRef}
      style={{
        width: "100vw",
        height: "100vh",
        margin: 0,
        padding: 0,
        backgroundColor: "black",
        position: "relative",
      }}
    >
      {loading && (
        <div
          style={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            color: "white",
            fontSize: "24px",
          }}
        >
          Cargando...
        </div>
      )}
    </div>
  );
}

export default App;